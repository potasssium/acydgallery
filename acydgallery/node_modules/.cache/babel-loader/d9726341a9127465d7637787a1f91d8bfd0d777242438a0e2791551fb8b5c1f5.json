{"ast":null,"code":"/**\n * Authentication API Module\n * \n * This file contains functions for interacting with the backend authentication API.\n * In a production environment, these functions would make actual HTTP requests to your backend server,\n * which would then interact with your SQL database.\n * \n * For now, this is a simulation to demonstrate the structure.\n */\n\n// Sample function to login a user\nexport const loginUser = async (email, password) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch:\n    // const response = await fetch('/api/auth/login', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ email, password }),\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Login failed');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate a successful login\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n\n    // Simulate database lookup\n    if (email === 'demo@example.com' && password === 'Password123') {\n      return {\n        id: 1,\n        name: 'Demo User',\n        email: email,\n        isAuthenticated: true,\n        token: 'sample-jwt-token-would-be-here'\n      };\n    } else {\n      throw new Error('Invalid email or password');\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Sample function to register a new user\nexport const registerUser = async (name, email, password) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch:\n    // const response = await fetch('/api/auth/register', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ name, email, password }),\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Registration failed');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate a successful registration\n    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay\n\n    // Simulate database insertion\n    return {\n      id: Math.floor(Math.random() * 1000) + 1,\n      // Generate a random user ID\n      name: name,\n      email: email,\n      isAuthenticated: true,\n      token: 'sample-jwt-token-would-be-here'\n    };\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n// Sample function to get user profile\nexport const getUserProfile = async userId => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch(`/api/users/${userId}`, {\n    //   method: 'GET',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Failed to fetch user profile');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate fetching a user profile\n    await new Promise(resolve => setTimeout(resolve, 800)); // Simulate network delay\n\n    // Simulate database query\n    return {\n      id: userId,\n      name: 'Demo User',\n      email: 'demo@example.com',\n      phone: '555-123-4567',\n      address: {\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zip: '12345',\n        country: 'USA'\n      },\n      createdAt: '2023-01-15'\n    };\n  } catch (error) {\n    console.error('Get profile error:', error);\n    throw error;\n  }\n};\n\n// Sample function to update user profile\nexport const updateUserProfile = async (userId, userData) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch(`/api/users/${userId}`, {\n    //   method: 'PUT',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify(userData),\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Failed to update user profile');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate updating a user profile\n    await new Promise(resolve => setTimeout(resolve, 1200)); // Simulate network delay\n\n    // Simulate database update\n    return {\n      ...userData,\n      id: userId,\n      updatedAt: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Update profile error:', error);\n    throw error;\n  }\n};\n\n// Sample function to get user orders\nexport const getUserOrders = async userId => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch(`/api/users/${userId}/orders`, {\n    //   method: 'GET',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Failed to fetch orders');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate fetching user orders\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n\n    // Simulate database query\n    return [{\n      id: 'ORD-1234',\n      date: '2023-11-15',\n      total: 129.99,\n      status: 'Delivered',\n      items: [{\n        id: 1,\n        name: 'ACYD T-Shirt',\n        price: 49.99,\n        quantity: 1\n      }, {\n        id: 2,\n        name: 'ACYD Hoodie',\n        price: 79.99,\n        quantity: 1\n      }]\n    }, {\n      id: 'ORD-5678',\n      date: '2023-10-28',\n      total: 89.99,\n      status: 'Processing',\n      items: [{\n        id: 3,\n        name: 'ACYD Cap',\n        price: 29.99,\n        quantity: 1\n      }, {\n        id: 4,\n        name: 'ACYD Poster',\n        price: 19.99,\n        quantity: 3\n      }]\n    }];\n  } catch (error) {\n    console.error('Get orders error:', error);\n    throw error;\n  }\n};\n\n// Sample function to logout a user\nexport const logoutUser = async () => {\n  try {\n    // In a real application, this might involve an API call to invalidate the token on the server\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch('/api/auth/logout', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   console.warn('Logout warning:', errorData.message);\n    // }\n\n    // For demonstration, we'll simulate a logout\n    await new Promise(resolve => setTimeout(resolve, 500)); // Simulate network delay\n\n    // Clear local storage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Logout error:', error);\n    // Still remove local storage even if the API call fails\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    return {\n      success: true\n    };\n  }\n};","map":{"version":3,"names":["loginUser","email","password","Promise","resolve","setTimeout","id","name","isAuthenticated","token","Error","error","console","registerUser","Math","floor","random","getUserProfile","userId","phone","address","street","city","state","zip","country","createdAt","updateUserProfile","userData","updatedAt","Date","toISOString","getUserOrders","date","total","status","items","price","quantity","logoutUser","localStorage","removeItem","success"],"sources":["/home/kay/Documents/acydgallery/acydgallery/src/api/authAPI.js"],"sourcesContent":["/**\n * Authentication API Module\n * \n * This file contains functions for interacting with the backend authentication API.\n * In a production environment, these functions would make actual HTTP requests to your backend server,\n * which would then interact with your SQL database.\n * \n * For now, this is a simulation to demonstrate the structure.\n */\n\n// Sample function to login a user\nexport const loginUser = async (email, password) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch:\n    // const response = await fetch('/api/auth/login', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ email, password }),\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Login failed');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate a successful login\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n    \n    // Simulate database lookup\n    if (email === 'demo@example.com' && password === 'Password123') {\n      return {\n        id: 1,\n        name: 'Demo User',\n        email: email,\n        isAuthenticated: true,\n        token: 'sample-jwt-token-would-be-here'\n      };\n    } else {\n      throw new Error('Invalid email or password');\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\n// Sample function to register a new user\nexport const registerUser = async (name, email, password) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch:\n    // const response = await fetch('/api/auth/register', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ name, email, password }),\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Registration failed');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate a successful registration\n    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay\n    \n    // Simulate database insertion\n    return {\n      id: Math.floor(Math.random() * 1000) + 1, // Generate a random user ID\n      name: name,\n      email: email,\n      isAuthenticated: true,\n      token: 'sample-jwt-token-would-be-here'\n    };\n  } catch (error) {\n    console.error('Registration error:', error);\n    throw error;\n  }\n};\n\n// Sample function to get user profile\nexport const getUserProfile = async (userId) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch(`/api/users/${userId}`, {\n    //   method: 'GET',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Failed to fetch user profile');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate fetching a user profile\n    await new Promise(resolve => setTimeout(resolve, 800)); // Simulate network delay\n    \n    // Simulate database query\n    return {\n      id: userId,\n      name: 'Demo User',\n      email: 'demo@example.com',\n      phone: '555-123-4567',\n      address: {\n        street: '123 Main St',\n        city: 'Anytown',\n        state: 'CA',\n        zip: '12345',\n        country: 'USA'\n      },\n      createdAt: '2023-01-15'\n    };\n  } catch (error) {\n    console.error('Get profile error:', error);\n    throw error;\n  }\n};\n\n// Sample function to update user profile\nexport const updateUserProfile = async (userId, userData) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch(`/api/users/${userId}`, {\n    //   method: 'PUT',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify(userData),\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Failed to update user profile');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate updating a user profile\n    await new Promise(resolve => setTimeout(resolve, 1200)); // Simulate network delay\n    \n    // Simulate database update\n    return {\n      ...userData,\n      id: userId,\n      updatedAt: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Update profile error:', error);\n    throw error;\n  }\n};\n\n// Sample function to get user orders\nexport const getUserOrders = async (userId) => {\n  try {\n    // In a real application, this would be an API call to your backend\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch(`/api/users/${userId}/orders`, {\n    //   method: 'GET',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   throw new Error(errorData.message || 'Failed to fetch orders');\n    // }\n    // \n    // const data = await response.json();\n    // return data;\n\n    // For demonstration, we'll simulate fetching user orders\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n    \n    // Simulate database query\n    return [\n      {\n        id: 'ORD-1234',\n        date: '2023-11-15',\n        total: 129.99,\n        status: 'Delivered',\n        items: [\n          { id: 1, name: 'ACYD T-Shirt', price: 49.99, quantity: 1 },\n          { id: 2, name: 'ACYD Hoodie', price: 79.99, quantity: 1 }\n        ]\n      },\n      {\n        id: 'ORD-5678',\n        date: '2023-10-28',\n        total: 89.99,\n        status: 'Processing',\n        items: [\n          { id: 3, name: 'ACYD Cap', price: 29.99, quantity: 1 },\n          { id: 4, name: 'ACYD Poster', price: 19.99, quantity: 3 }\n        ]\n      }\n    ];\n  } catch (error) {\n    console.error('Get orders error:', error);\n    throw error;\n  }\n};\n\n// Sample function to logout a user\nexport const logoutUser = async () => {\n  try {\n    // In a real application, this might involve an API call to invalidate the token on the server\n    // Example using fetch with authentication token:\n    // const token = localStorage.getItem('token');\n    // const response = await fetch('/api/auth/logout', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Authorization': `Bearer ${token}`,\n    //     'Content-Type': 'application/json',\n    //   },\n    // });\n    // \n    // if (!response.ok) {\n    //   const errorData = await response.json();\n    //   console.warn('Logout warning:', errorData.message);\n    // }\n\n    // For demonstration, we'll simulate a logout\n    await new Promise(resolve => setTimeout(resolve, 500)); // Simulate network delay\n    \n    // Clear local storage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Logout error:', error);\n    // Still remove local storage even if the API call fails\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    return { success: true };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}