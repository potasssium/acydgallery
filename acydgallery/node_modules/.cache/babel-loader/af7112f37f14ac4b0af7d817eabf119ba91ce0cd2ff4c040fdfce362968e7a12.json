{"ast":null,"code":"/**\n * Authentication API Module\n * \n * This file contains functions for interacting with the backend authentication API.\n * These functions make HTTP requests to your backend server, which interacts with your MySQL database.\n */\n\n// Make sure this points to your server\nconst API_URL = 'http://localhost:3001/api';\n\n// Helper function to get the stored token from either localStorage or sessionStorage\nconst getStoredToken = () => {\n  return localStorage.getItem('token') || sessionStorage.getItem('token');\n};\n\n// Helper function to get the stored user from either localStorage or sessionStorage\nconst getStoredUser = () => {\n  const userFromLocal = localStorage.getItem('user');\n  const userFromSession = sessionStorage.getItem('user');\n  return userFromLocal ? JSON.parse(userFromLocal) : userFromSession ? JSON.parse(userFromSession) : null;\n};\n\n// Helper function to check if token is expired\nconst isTokenExpired = token => {\n  if (!token) return true;\n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.exp < Date.now() / 1000;\n  } catch (error) {\n    return true;\n  }\n};\n\n// Refresh token if needed\nexport const refreshTokenIfNeeded = async () => {\n  const token = getStoredToken();\n  const user = getStoredUser();\n  if (!token || !user) return null;\n  if (isTokenExpired(token)) {\n    try {\n      // Make a request to the refresh token endpoint\n      const response = await fetch(`${API_URL}/auth/refresh`, {\n        method: 'POST',\n        credentials: 'include',\n        // Include cookies in the request\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Token refresh failed');\n      }\n      const data = await response.json();\n\n      // Update storage with the new token\n      if (localStorage.getItem('token')) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data));\n      } else {\n        sessionStorage.setItem('token', data.token);\n        sessionStorage.setItem('user', JSON.stringify(data));\n      }\n      return data;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      // If refresh fails, log the user out\n      logoutUser();\n      return null;\n    }\n  }\n  return user;\n};\n\n// Login a user\nexport const loginUser = async (email, password, rememberMe = false) => {\n  console.log('Login attempt for:', email, 'rememberMe:', rememberMe);\n  try {\n    console.log('Sending login request to:', `${API_URL}/auth/login`);\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      // Include cookies in the request\n      body: JSON.stringify({\n        email,\n        password,\n        rememberMe\n      })\n    });\n    console.log('Login response status:', response.status);\n    if (!response.ok) {\n      let errorMessage = 'Login failed';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n        console.log('Login error data:', errorData);\n      } catch (jsonError) {\n        console.error('Error parsing error response:', jsonError);\n        errorMessage = `Login failed (${response.status}: ${response.statusText})`;\n      }\n      throw new Error(errorMessage);\n    }\n    const data = await response.json();\n    console.log('Login successful, received data:', {\n      ...data,\n      token: data.token ? 'TOKEN_RECEIVED' : 'NO_TOKEN'\n    });\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n\n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock login data');\n\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Simulate database lookup\n      if (email === 'demo@example.com' && password === 'Password123') {\n        const mockData = {\n          id: 1,\n          name: 'Demo User',\n          email: email,\n          isAuthenticated: true,\n          token: 'sample-jwt-token-would-be-here'\n        };\n        console.log('Returning mock data:', mockData);\n        return mockData;\n      } else {\n        console.log('Mock login failed: Invalid credentials');\n        throw new Error('Invalid email or password');\n      }\n    }\n    throw error;\n  }\n};\n\n// Register a new user\nexport const registerUser = async (name, email, password) => {\n  console.log('Registration attempt for:', email);\n  try {\n    console.log('Sending registration data:', {\n      name,\n      email,\n      passwordLength: password === null || password === void 0 ? void 0 : password.length\n    });\n    console.log('Sending registration request to:', `${API_URL}/auth/register`);\n\n    // Add a test request to check if the server is reachable\n    try {\n      const testResponse = await fetch(`${API_URL}/test-db`, {\n        credentials: 'include' // Include cookies in the request\n      });\n      console.log('Test DB response:', await testResponse.text());\n    } catch (testError) {\n      console.error('Test DB request failed:', testError);\n    }\n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      // Include cookies in the request\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    console.log('Registration response status:', response.status);\n    if (!response.ok) {\n      let errorMessage = 'Registration failed';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n        console.log('Registration error data:', errorData);\n      } catch (jsonError) {\n        console.error('Error parsing error response:', jsonError);\n        errorMessage = `Registration failed (${response.status}: ${response.statusText})`;\n      }\n      throw new Error(errorMessage);\n    }\n\n    // Parse the response\n    const data = await response.json();\n    console.log('Registration successful:', data);\n\n    // Store user data in localStorage or sessionStorage based on rememberMe\n    const storage = false ? localStorage : sessionStorage;\n    storage.setItem('user', JSON.stringify(data));\n    storage.setItem('token', data.token);\n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n\n    // Add more detailed error information for network errors\n    if (error.name === 'TypeError' && error.message.includes('NetworkError')) {\n      console.error('Network error details:', {\n        API_URL,\n        error: error.toString(),\n        stack: error.stack\n      });\n      throw new Error(`Network error when connecting to server. Please check if the server is running and accessible. Details: ${error.message}`);\n    }\n\n    // For development/testing only - remove in production\n    if (process.env.NODE_ENV === 'development' && !window.location.hostname.includes('localhost')) {\n      console.log('Using mock registration in development');\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        name,\n        email,\n        token: 'mock-jwt-token-for-testing',\n        isAuthenticated: true\n      };\n      sessionStorage.setItem('user', JSON.stringify(mockUser));\n      sessionStorage.setItem('token', mockUser.token);\n      return mockUser;\n    }\n    throw error;\n  }\n};\n\n// Get user profile\nexport const getUserProfile = async userId => {\n  try {\n    // Check if token needs to be refreshed\n    await refreshTokenIfNeeded();\n    const token = getStoredToken();\n    const response = await fetch(`${API_URL}/users/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include' // Include cookies in the request\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to fetch user profile');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Get profile error:', error);\n\n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock profile data');\n\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      // Simulate database query\n      return {\n        id: userId,\n        name: 'Demo User',\n        email: 'demo@example.com',\n        phone: '555-123-4567',\n        address: {\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zip: '12345',\n          country: 'USA'\n        },\n        createdAt: '2023-01-15'\n      };\n    }\n    throw error;\n  }\n};\n\n// Update user profile\nexport const updateUserProfile = async (userId, userData) => {\n  try {\n    // Check if token needs to be refreshed\n    await refreshTokenIfNeeded();\n    const token = getStoredToken();\n    const response = await fetch(`${API_URL}/users/${userId}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      // Include cookies in the request\n      body: JSON.stringify(userData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to update user profile');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Update profile error:', error);\n\n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock update data');\n\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1200));\n\n      // Simulate database update\n      return {\n        ...userData,\n        id: userId,\n        updatedAt: new Date().toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Get user orders\nexport const getUserOrders = async userId => {\n  try {\n    // Check if token needs to be refreshed\n    await refreshTokenIfNeeded();\n    const token = getStoredToken();\n    const response = await fetch(`${API_URL}/users/${userId}/orders`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include' // Include cookies in the request\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to fetch orders');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Get orders error:', error);\n\n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock orders data');\n\n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Simulate database query\n      return [{\n        id: 'ORD-1234',\n        date: '2023-11-15',\n        total: 129.99,\n        status: 'Delivered',\n        items: [{\n          id: 1,\n          name: 'ACYD T-Shirt',\n          price: 49.99,\n          quantity: 1\n        }, {\n          id: 2,\n          name: 'ACYD Hoodie',\n          price: 79.99,\n          quantity: 1\n        }]\n      }, {\n        id: 'ORD-5678',\n        date: '2023-10-28',\n        total: 89.99,\n        status: 'Processing',\n        items: [{\n          id: 3,\n          name: 'ACYD Cap',\n          price: 29.99,\n          quantity: 1\n        }, {\n          id: 4,\n          name: 'ACYD Poster',\n          price: 19.99,\n          quantity: 3\n        }]\n      }];\n    }\n    throw error;\n  }\n};\n\n// Logout a user\nexport const logoutUser = async () => {\n  try {\n    // Call the logout endpoint to clear cookies\n    await fetch(`${API_URL}/auth/logout`, {\n      method: 'POST',\n      credentials: 'include' // Include cookies in the request\n    });\n\n    // Clear local storage and session storage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('token');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Logout error:', error);\n    // Still remove storage even if there's an error\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('token');\n    return {\n      success: true\n    };\n  }\n};","map":{"version":3,"names":["API_URL","getStoredToken","localStorage","getItem","sessionStorage","getStoredUser","userFromLocal","userFromSession","JSON","parse","isTokenExpired","token","payload","atob","split","exp","Date","now","error","refreshTokenIfNeeded","user","response","fetch","method","credentials","headers","ok","Error","data","json","setItem","stringify","console","logoutUser","loginUser","email","password","rememberMe","log","body","status","errorMessage","errorData","jsonError","statusText","window","location","hostname","includes","message","Promise","resolve","setTimeout","mockData","id","name","isAuthenticated","registerUser","passwordLength","length","testResponse","text","testError","storage","toString","stack","process","env","NODE_ENV","mockUser","Math","floor","random","getUserProfile","userId","phone","address","street","city","state","zip","country","createdAt","updateUserProfile","userData","updatedAt","toISOString","getUserOrders","date","total","items","price","quantity","removeItem","success"],"sources":["/home/kay/Documents/acydgallery/acydgallery/src/api/authAPI.js"],"sourcesContent":["/**\n * Authentication API Module\n * \n * This file contains functions for interacting with the backend authentication API.\n * These functions make HTTP requests to your backend server, which interacts with your MySQL database.\n */\n\n// Make sure this points to your server\nconst API_URL = 'http://localhost:3001/api';\n\n// Helper function to get the stored token from either localStorage or sessionStorage\nconst getStoredToken = () => {\n  return localStorage.getItem('token') || sessionStorage.getItem('token');\n};\n\n// Helper function to get the stored user from either localStorage or sessionStorage\nconst getStoredUser = () => {\n  const userFromLocal = localStorage.getItem('user');\n  const userFromSession = sessionStorage.getItem('user');\n  return userFromLocal ? JSON.parse(userFromLocal) : userFromSession ? JSON.parse(userFromSession) : null;\n};\n\n// Helper function to check if token is expired\nconst isTokenExpired = (token) => {\n  if (!token) return true;\n  \n  try {\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.exp < Date.now() / 1000;\n  } catch (error) {\n    return true;\n  }\n};\n\n// Refresh token if needed\nexport const refreshTokenIfNeeded = async () => {\n  const token = getStoredToken();\n  const user = getStoredUser();\n  \n  if (!token || !user) return null;\n  \n  if (isTokenExpired(token)) {\n    try {\n      // Make a request to the refresh token endpoint\n      const response = await fetch(`${API_URL}/auth/refresh`, {\n        method: 'POST',\n        credentials: 'include', // Include cookies in the request\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Token refresh failed');\n      }\n      \n      const data = await response.json();\n      \n      // Update storage with the new token\n      if (localStorage.getItem('token')) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data));\n      } else {\n        sessionStorage.setItem('token', data.token);\n        sessionStorage.setItem('user', JSON.stringify(data));\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      // If refresh fails, log the user out\n      logoutUser();\n      return null;\n    }\n  }\n  \n  return user;\n};\n\n// Login a user\nexport const loginUser = async (email, password, rememberMe = false) => {\n  console.log('Login attempt for:', email, 'rememberMe:', rememberMe);\n  try {\n    console.log('Sending login request to:', `${API_URL}/auth/login`);\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include', // Include cookies in the request\n      body: JSON.stringify({ email, password, rememberMe }),\n    });\n    \n    console.log('Login response status:', response.status);\n    \n    if (!response.ok) {\n      let errorMessage = 'Login failed';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n        console.log('Login error data:', errorData);\n      } catch (jsonError) {\n        console.error('Error parsing error response:', jsonError);\n        errorMessage = `Login failed (${response.status}: ${response.statusText})`;\n      }\n      throw new Error(errorMessage);\n    }\n    \n    const data = await response.json();\n    console.log('Login successful, received data:', { ...data, token: data.token ? 'TOKEN_RECEIVED' : 'NO_TOKEN' });\n    return data;\n  } catch (error) {\n    console.error('Login error:', error);\n    \n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock login data');\n      \n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Simulate database lookup\n      if (email === 'demo@example.com' && password === 'Password123') {\n        const mockData = {\n          id: 1,\n          name: 'Demo User',\n          email: email,\n          isAuthenticated: true,\n          token: 'sample-jwt-token-would-be-here'\n        };\n        console.log('Returning mock data:', mockData);\n        return mockData;\n      } else {\n        console.log('Mock login failed: Invalid credentials');\n        throw new Error('Invalid email or password');\n      }\n    }\n    \n    throw error;\n  }\n};\n\n// Register a new user\nexport const registerUser = async (name, email, password) => {\n  console.log('Registration attempt for:', email);\n  try {\n    console.log('Sending registration data:', { name, email, passwordLength: password?.length });\n    console.log('Sending registration request to:', `${API_URL}/auth/register`);\n    \n    // Add a test request to check if the server is reachable\n    try {\n      const testResponse = await fetch(`${API_URL}/test-db`, {\n        credentials: 'include' // Include cookies in the request\n      });\n      console.log('Test DB response:', await testResponse.text());\n    } catch (testError) {\n      console.error('Test DB request failed:', testError);\n    }\n    \n    const response = await fetch(`${API_URL}/auth/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include', // Include cookies in the request\n      body: JSON.stringify({ name, email, password }),\n    });\n    \n    console.log('Registration response status:', response.status);\n    \n    if (!response.ok) {\n      let errorMessage = 'Registration failed';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n        console.log('Registration error data:', errorData);\n      } catch (jsonError) {\n        console.error('Error parsing error response:', jsonError);\n        errorMessage = `Registration failed (${response.status}: ${response.statusText})`;\n      }\n      throw new Error(errorMessage);\n    }\n    \n    // Parse the response\n    const data = await response.json();\n    console.log('Registration successful:', data);\n    \n    // Store user data in localStorage or sessionStorage based on rememberMe\n    const storage = false ? localStorage : sessionStorage;\n    storage.setItem('user', JSON.stringify(data));\n    storage.setItem('token', data.token);\n    \n    return data;\n  } catch (error) {\n    console.error('Registration error:', error);\n    \n    // Add more detailed error information for network errors\n    if (error.name === 'TypeError' && error.message.includes('NetworkError')) {\n      console.error('Network error details:', {\n        API_URL,\n        error: error.toString(),\n        stack: error.stack\n      });\n      throw new Error(`Network error when connecting to server. Please check if the server is running and accessible. Details: ${error.message}`);\n    }\n    \n    // For development/testing only - remove in production\n    if (process.env.NODE_ENV === 'development' && !window.location.hostname.includes('localhost')) {\n      console.log('Using mock registration in development');\n      const mockUser = {\n        id: Math.floor(Math.random() * 1000),\n        name,\n        email,\n        token: 'mock-jwt-token-for-testing',\n        isAuthenticated: true\n      };\n      \n      sessionStorage.setItem('user', JSON.stringify(mockUser));\n      sessionStorage.setItem('token', mockUser.token);\n      \n      return mockUser;\n    }\n    \n    throw error;\n  }\n};\n\n// Get user profile\nexport const getUserProfile = async (userId) => {\n  try {\n    // Check if token needs to be refreshed\n    await refreshTokenIfNeeded();\n    \n    const token = getStoredToken();\n    const response = await fetch(`${API_URL}/users/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include', // Include cookies in the request\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to fetch user profile');\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Get profile error:', error);\n    \n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock profile data');\n      \n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      // Simulate database query\n      return {\n        id: userId,\n        name: 'Demo User',\n        email: 'demo@example.com',\n        phone: '555-123-4567',\n        address: {\n          street: '123 Main St',\n          city: 'Anytown',\n          state: 'CA',\n          zip: '12345',\n          country: 'USA'\n        },\n        createdAt: '2023-01-15'\n      };\n    }\n    \n    throw error;\n  }\n};\n\n// Update user profile\nexport const updateUserProfile = async (userId, userData) => {\n  try {\n    // Check if token needs to be refreshed\n    await refreshTokenIfNeeded();\n    \n    const token = getStoredToken();\n    const response = await fetch(`${API_URL}/users/${userId}`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include', // Include cookies in the request\n      body: JSON.stringify(userData),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to update user profile');\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Update profile error:', error);\n    \n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock update data');\n      \n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1200));\n      \n      // Simulate database update\n      return {\n        ...userData,\n        id: userId,\n        updatedAt: new Date().toISOString()\n      };\n    }\n    \n    throw error;\n  }\n};\n\n// Get user orders\nexport const getUserOrders = async (userId) => {\n  try {\n    // Check if token needs to be refreshed\n    await refreshTokenIfNeeded();\n    \n    const token = getStoredToken();\n    const response = await fetch(`${API_URL}/users/${userId}/orders`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include', // Include cookies in the request\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Failed to fetch orders');\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Get orders error:', error);\n    \n    // For demo purposes, if the server is not running, use the mock data\n    if (!window.location.hostname.includes('localhost') || error.message.includes('Failed to fetch')) {\n      console.log('Using mock orders data');\n      \n      // Simulate network delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Simulate database query\n      return [\n        {\n          id: 'ORD-1234',\n          date: '2023-11-15',\n          total: 129.99,\n          status: 'Delivered',\n          items: [\n            { id: 1, name: 'ACYD T-Shirt', price: 49.99, quantity: 1 },\n            { id: 2, name: 'ACYD Hoodie', price: 79.99, quantity: 1 }\n          ]\n        },\n        {\n          id: 'ORD-5678',\n          date: '2023-10-28',\n          total: 89.99,\n          status: 'Processing',\n          items: [\n            { id: 3, name: 'ACYD Cap', price: 29.99, quantity: 1 },\n            { id: 4, name: 'ACYD Poster', price: 19.99, quantity: 3 }\n          ]\n        }\n      ];\n    }\n    \n    throw error;\n  }\n};\n\n// Logout a user\nexport const logoutUser = async () => {\n  try {\n    // Call the logout endpoint to clear cookies\n    await fetch(`${API_URL}/auth/logout`, {\n      method: 'POST',\n      credentials: 'include', // Include cookies in the request\n    });\n    \n    // Clear local storage and session storage\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('token');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Logout error:', error);\n    // Still remove storage even if there's an error\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    sessionStorage.removeItem('user');\n    sessionStorage.removeItem('token');\n    return { success: true };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}